			    GraphQL on node.js using Apollo server

Tech Stack:
1.node.js - Platform and runtime
2.Apollo server - Runtime for graphQL apps.
3.Typescript - language for writing apps -  wrapper on javascript
...................................................................................
				Typescript

What is typescript?
  Ts is programming language created on top of ECMA 6 standards

Why type script?
   Javascript is dynamic typed,object based,functional programming language.

Dynamic typed means the type of variable not identifed/verified during compile time.

if you want to build enterprise grade apps, we need strong typing...

index.js-source code
  |
 feed into host(browser/node)
  |
  parser
    |
   will translate the code into plain text(lexical structure)
    |
    compiler
     |
     byte code(assembly)
     |
 -----------
   Runtime
     byte code - interpreter---JIT --Native calls --output
  
....................................................................................
		What if i want to build object oriented system using js?

=>2010 the community project(coffee script) started by introducing classes inside js
  -classes,interfaces,modules.....
  dev code would be coffeescript , but production code would be js.
  hello.coffee
     ->compiler---hello.js

 Still coffee script not type safe(no strong typing)

=>2011 the Microsoft started the project called "Oo js" using C#.
  class,interfaces,modules,strong typing...
  hello.cs ---->hello.js
 
  2012 -ECMA Commttee introduced ES 6 - class,let,const...... 
 
  2012- MS rewritten the oo js project on the top of es 6 -  Typescript

  TS => { js features(es 6,es 5} + strong typing(data types),extra features }

  hello.ts ---> hello.js

Today ts is one of defacto standard for building oo and strongly typed js apps.
....................................................................................
				Type script setup and features


1.type system
2.classes
3.functions
4.decorators


Project setup:
E:\session\TechMahendra>mkdir mytsapp

E:\session\TechMahendra>cd mytsapp

E:\session\TechMahendra\mytsapp>npm init --yes
Wrote to E:\session\TechMahendra\mytsapp\package.json:

E:\session\TechMahendra>mkdir mytsapp

E:\session\TechMahendra>cd mytsapp

E:\session\TechMahendra\mytsapp>npm init --yes
Wrote to E:\session\TechMahendra\mytsapp\package.json:

{
  "name": "mytsapp",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC"
}
....
E:\session\TechMahendra\mytsapp>mkdir src

E:\session\TechMahendra\mytsapp>npm  install typescript --save-dev

added 1 package, and audited 2 packages in 3s

found 0 vulnerabilities

E:\session\TechMahendra\mytsapp>code .

tsconfig.json
{
    "compilerOptions": {
        "outDir": "build",
        "watch": true,
        "noEmitOnError": true,
        "experimentalDecorators": true,
        "emitDecoratorMetadata": true,

    },
    "exclude": [
        "node_modules"
    ],
    "files": [
        "src/index.ts"
    ]
}

configuration:
package.json
"scripts": {
    "compile" : "tsc"
  }

>npm run compile

>open another cmd

>"scripts": {
    "compile" : "tsc"
  }
E:\session\TechMahendra\mytsapp>node build/index.js
Hello Typescript!!

....................................................................................

Note: our app is based on pure es 6 standards not on es 5 

Language fundamentals:

1.variable declarations

  var | let | const | this variableName=value(literals)
  
var- es 5 keyword : we dont use to declare variables
let and const -es 6 keyword

types of literals

1.string
2.number
3.boolean
4.undefined
5.NaN
6.infinity
7.function
8.null
9.object

2.data types
 Typescript offers data types based on built in values(literals)

classification:
1.primitives
   number,string,boolean
number -
   numbers,NaN,infinity
strings
   "" ,'' ,``(back tick)
booleans
  true 
  false
2.reference types
   any object types
   array 
3.other types
  any
  void
  union
  
Types and variables:
//variable declarations with type
let firstName: string = "Subramanian"
console.log("first Name " + firstName)
console.log('First Name' + firstName)
//es 6 template literal: interploation
console.log(`First Name ${firstName}`)
//verify the type safty
//firstName =90 // error TS2322: Type 'number' is not assignable to type 'string'.
firstName = "Ram"

//another syntax to declare variables : Type inference
//here there is no explicit, the variable type is understood, based on value
let lastName = "Murugan"
console.log(`last Name ${lastName}`)
// lastName =90

//numbers
let age: number = 42
console.log(`Age ${age}`)

//booleans
let active: boolean = true
console.log(`Status ${active}`)

//undefined : implicit undefined
let salary;
console.log(`salary ${salary}`)
salary = 100;
console.log(`salary ${salary}`)
salary ="1000"

//any : instead of declaraing undefined it is recommended to use any.
//any means i dont know the type of variable at present
//any means i dont want any specific type for the variable.
let somevar:any 
console.log(`SomeVar ${somevar}`)
somevar =10
console.log(`SomeVar ${somevar}`)
somevar =true
console.log(`SomeVar ${somevar}`)

//NaN -  Not a Number : it is runtime error code, which is thrown during runtime if computation fails

let a  //undefined
let b =10; // number

// c  = undefined * number => NaN
let c = a * b 
console.log(`c ${c}`)

//infinity
let d = 10/0
console.log(`d ${d}`)
................................................................................
				 const and let vs const
.................................................................................

let is reassignable
const is readonly
//let vs const 
let a = 10;
console.log(`a ${a}`)
a = 90
console.log(`a ${a}`)

const b = 90;
console.log(`b ${b}`)
b=900;
console.log(`b ${b}`)
.....................................................................................
				 function
....................................................................................
//functions
//es 6 default args
function calculate(a: number = 0, b: number = 0): number {
    return a + b
}
console.log(calculate(10, 10))
// console.log(calculate()) //error no arg is passed
// console.log(calculate("10","10"))
console.log(calculate())

//void 
function doStuff(): void {
    return
}
//ts optional parameters
function fetchData(url?: string, method?: string): void {
    console.log(url, method)
}
fetchData("/api/users", "GET")
fetchData()

//union types
//value must be "Male" or "Female" | "Third"
function fetchUsers(gender: "Male" | "Female" | "Third" = "Male", id?: string | number) {
    console.log(id, gender)
}
fetchUsers("Male")
fetchUsers("Female", 92)
fetchUsers("Male", 122)
//fetchUsers("xxx")


























  








 









